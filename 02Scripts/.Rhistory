BuiComb_nms <- c("Segment", "NumBuild", "NumConst_since11", "NumConst_since15", "NumDemo_since11", "NumDemo_since15", "NumReno_since11", "NumReno_since15")
Seg_building <- as.data.frame(matrix(0, nrow=24, ncol=length(BuiComb_nms)))
names(Seg_building) <- BuiComb_nms
Seg_building$Segment <- unique(BuildingParcels$Name)
Seg_building$NumBuild <- num_noNA
Seg_building$NumConst_since11[match(rownames(perm_yrs_NewCons), Seg_building$Segment)] <- rowSums(perm_yrs_NewCons[,c("2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020", "2021", "2022", "2023")])
Seg_building$NumConst_since15[match(rownames(perm_yrs_NewCons), Seg_building$Segment)] <- rowSums(perm_yrs_NewCons[,c("2015", "2016", "2017", "2018", "2019", "2020", "2021", "2022", "2023")])
Seg_building$NumDemo_since11[match(rownames(perm_yrs_demo), Seg_building$Segment)]  <- rowSums(perm_yrs_demo[,c("2011", "2012", "2013", "2014", "2015", "2017", "2018", "2020", "2021", "2022", "2023")])
Seg_building$NumDemo_since15[match(rownames(perm_yrs_demo), Seg_building$Segment)]  <- rowSums(perm_yrs_demo[,c("2015", "2017", "2018", "2020", "2021", "2022", "2023")])
Seg_building$NumReno_since11[match(rownames(perm_yrs_Reno), Seg_building$Segment)] <- rowSums(perm_yrs_Reno[,c("2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020", "2021", "2022", "2023")])
Seg_building$NumReno_since15[match(rownames(perm_yrs_Reno), Seg_building$Segment)] <- rowSums(perm_yrs_Reno[,c("2015", "2016", "2017", "2018", "2019", "2020", "2021", "2022", "2023")])
##############################################################Zoning Data
TotArea <- ZoningDat %>%
group_by(Name) %>%
summarize_at(vars("Area_m2"), sum, na.rm=TRUE)
zoning_cols <- c("Segment", "PercRes_z", "PercComm_z", "PercInst_z")
Zoning_bySeg <- as.data.frame(matrix(0, nrow=24, ncol=length(zoning_cols)))
names(Zoning_bySeg) <- zoning_cols
AreaBySimpleZone <- ZoningDat %>%
group_by(Name, SimplifiedZone) %>%
summarize_at(vars("Area_m2"), sum, na.rm=TRUE)
AreaBySimpleZone <- AreaBySimpleZone[!is.na(AreaBySimpleZone$SimplifiedZone),]
Zoning_bySeg$Segment <- TotArea$Name
r1_inds <- match(AreaBySimpleZone$Name[AreaBySimpleZone$SimplifiedZone == "Residential"], TotArea$Name)
Zoning_bySeg$PercRes_z[r1_inds] <- AreaBySimpleZone$Area_m2[AreaBySimpleZone$SimplifiedZone == "Residential"]/TotArea$Area_m2[r1_inds]
r2_inds <- match(AreaBySimpleZone$Name[AreaBySimpleZone$SimplifiedZone == "Commercial"], TotArea$Name)
Zoning_bySeg$PercComm_z[r2_inds] <- AreaBySimpleZone$Area_m2[AreaBySimpleZone$SimplifiedZone == "Commercial"]/TotArea$Area_m2[r2_inds]
r3_inds <- match(AreaBySimpleZone$Name[AreaBySimpleZone$SimplifiedZone == "Institutional"], TotArea$Name)
Zoning_bySeg$PercInst_z[r3_inds] <- AreaBySimpleZone$Area_m2[AreaBySimpleZone$SimplifiedZone == "Institutional"]/TotArea$Area_m2[r3_inds]
#tree species information
SppSpecificData <- read.csv("../01Data/Durham/DurhamSpeciesInfo_Dirr.csv")
#for ease later
TreeLvlCombined$GenSpe <- paste(TreeLvlCombined$Genus, TreeLvlCombined$Species, sep="_")
#To line up with species info
TreeLvlCombined$Species[TreeLvlCombined$Species == "unknown"| TreeLvlCombined$Species == "spp"] <- "spp."
TreeLvlCombined$DroughtTol <- rep(NA, length(TreeLvlCombined$TreeName))
TreeLvlCombined$SaltTol <- rep(NA, length(TreeLvlCombined$TreeName))
TreeLvlCombined$UrbanApp <- rep(NA, length(TreeLvlCombined$TreeName))
names(TreeLvlCombined)[names(TreeLvlCombined) == "CrownVigor"] <- "CrownStress"
##for a few weird species
TreeLvlCombined$Species[TreeLvlCombined$Species == "sylvatica"] <- "silvatica"
TreeLvlCombined$Species[TreeLvlCombined$Species == "x gradiflora"| TreeLvlCombined$Species == "grandiflora"| TreeLvlCombined$Species == "gradiflora" |TreeLvlCombined$Species == "grandifolia"] <- "x grandiflora"
TreeLvlCombined$Species[TreeLvlCombined$Species == "azerdarach"] <- "azedarach"
TreeLvlCombined$Species[TreeLvlCombined$Species == "indica "] <- "indica"
TreeLvlCombined$Species[TreeLvlCombined$Species == "buergeranum"|TreeLvlCombined$Species == "buergeranium"] <- "buergerianum"
TreeLvlCombined$Species[TreeLvlCombined$Species == "serrata" & TreeLvlCombined$Genus == "Prunus"] <- "serrulata"
TreeLvlCombined$Species[TreeLvlCombined$Species == "serotina"] <- "serrotina"
#row by row
for (t in 1:length(TreeLvlCombined$X)){
YesGen <- SppSpecificData$Genus == TreeLvlCombined$Genus[t]
YesSpp <- SppSpecificData$Species == TreeLvlCombined$Species[t]
SppInfoInd <- c(1:length(SppSpecificData[,1]))[(YesGen & YesSpp)]
#what do you do if you don't have info on this species
if(length(SppInfoInd) == 0){
print(paste("Error, no species information for", TreeLvlCombined$GenSpe[t], "Tree #", t))
##try to fill it in with the default for the genus
Spp2 <- SppSpecificData$Species =="spp."
SppInfoInd2 <- c(1:length(SppSpecificData[,1]))[(YesGen & Spp2)]
if(length(SppInfoInd2) == 0){
print(paste("Error, no generic genus-level information for", TreeLvlCombined$Genus[t], "Tree #", t))
next #go to the next tree
} else {
TreeLvlCombined$DroughtTol[t] <- SppSpecificData$DroughtTol[SppInfoInd2]
TreeLvlCombined$SaltTol[t] <- SppSpecificData$SaltTol[SppInfoInd2]
TreeLvlCombined$UrbanApp[t] <- SppSpecificData$StreetUrban[SppInfoInd2]
}
#have a species-level match
} else {
TreeLvlCombined$DroughtTol[t] <- SppSpecificData$DroughtTol[SppInfoInd]
TreeLvlCombined$SaltTol[t] <- SppSpecificData$SaltTol[SppInfoInd]
TreeLvlCombined$UrbanApp[t] <- SppSpecificData$StreetUrban[SppInfoInd]
} #seeing if there is a match
}
##Species group adjustment
TreeLvlCombined$GenSpe[TreeLvlCombined$GenSpe == "Lagerstroemia_unknown"| TreeLvlCombined$GenSpe == "Lagerstroemia_indica"] <- "Lagerstroemia_spp"
TreeLvlCombined$GenSpe[TreeLvlCombined$Genus == "Prunus"] <- "Prunus_spp"
SppFreq <- sort(table(TreeLvlCombined$GenSpe),decreasing = TRUE)
CommonSpp <- SppFreq[SppFreq > 50]
#Create a species group category
TreeLvlCombined$SppGroup <- rep("Other", length(TreeLvlCombined$TreeName))
TreeLvlCombined$SppGroup[TreeLvlCombined$GenSpe %in% names(CommonSpp)] <- TreeLvlCombined$GenSpe[TreeLvlCombined$GenSpe %in% names(CommonSpp)]
TreeLvlCombined$SppGroup <- as.factor(TreeLvlCombined$SppGroup) #for model
TreeLvlCombined$SppGroup <- relevel(TreeLvlCombined$SppGroup, ref = "Other")
##make a genus-lvl grouping
TreeLvlCombined$GenusGroup <- TreeLvlCombined$Genus
GenusFreq <- table(TreeLvlCombined$Genus)
GenusFreq <- GenusFreq[GenusFreq > 40]
TreeLvlCombined$GenusGroup[!(TreeLvlCombined$GenusGroup %in% names(GenusFreq))] <- "Other"
TreeLvlCombined$GenusGroup <- as.factor(TreeLvlCombined$GenusGroup )
TreeLvlCombined$GenusGroup <- relevel(TreeLvlCombined$GenusGroup, ref = "Other")
#to make it easier to correct mistakes + focus on street trees
TreeLvlCombined_mod <- TreeLvlCombined[TreeLvlCombined$Segment != "Duke" & TreeLvlCombined$Segment != "Park",]
#Get rid of trees without local site conditions
TreeLvlCombined_mod <- TreeLvlCombined_mod[!is.na(TreeLvlCombined_mod$Gardenscape),]
#calculate basal area
TreeLvlCombined_mod$BasalArea <- sapply(TreeLvlCombined_mod$DBHTot, basalArea)
TreeLvlCombined_mod <- TreeLvlCombined_mod[TreeLvlCombined_mod$BasalArea > 0, ] #because we need some kind of BA
#get segment as a factor
TreeLvlCombined_mod$Segment <- as.factor(TreeLvlCombined_mod$Segment)
#Year
TreeLvlCombined_mod$Year <- as.factor(TreeLvlCombined_mod$Year)
###########################################Cues to care
###########create Mulch categories
TreeLvlCombined_mod$Mulch[TreeLvlCombined_mod$Mulch == 1] <- "Mulch"
TreeLvlCombined_mod$Mulch[TreeLvlCombined_mod$Mulch == FALSE] <- "None"
TreeLvlCombined_mod$Mulch[TreeLvlCombined_mod$MulchVolcano == 1] <- "Volcano"
TreeLvlCombined_mod$Mulch <- as.factor(TreeLvlCombined_mod$Mulch)
TreeLvlCombined_mod$Mulch <- relevel(TreeLvlCombined_mod$Mulch, ref = "None")
##put a correctly mulched metric in place
TreeLvlCombined_mod$CorrMulch <- TreeLvlCombined_mod$Mulch
TreeLvlCombined_mod$CorrMulch <- as.character(TreeLvlCombined_mod$CorrMulch)
TreeLvlCombined_mod$CorrMulch[TreeLvlCombined_mod$CorrMulch == "Mulch"] <- 1
TreeLvlCombined_mod$CorrMulch[TreeLvlCombined_mod$CorrMulch != 1] <- 0
########Translate Gardenscape
TreeLvlCombined_mod$Gardenscape[TreeLvlCombined_mod$Gardenscape==""] <- "None"
h1 <- c("None", "Minimal", "Moderate", "Extensive")
h2 <- c(1:4)
GDict <- as.data.frame(matrix(c(h1,h2), nrow=4, ncol=2, byrow=FALSE))
names(GDict) <- c("Original", "Simplified")
TreeLvlCombined_mod$Gardenscape <- GDict$Simplified[match(TreeLvlCombined_mod$Gardenscape, GDict$Original)]
TreeLvlCombined_mod$Gardenscape <- as.character(TreeLvlCombined_mod$Gardenscape)
TreeLvlCombined_mod$Gardenscape[TreeLvlCombined_mod$Gardenscape == 3] <- 4
TreeLvlCombined_mod$Gardenscape[TreeLvlCombined_mod$Gardenscape == 2] <- 3
TreeLvlCombined_mod$Gardenscape[TreeLvlCombined_mod$Gardenscape == 1] <- 2
TreeLvlCombined_mod$Gardenscape[TreeLvlCombined_mod$Gardenscape == 2 & TreeLvlCombined_mod$Mowing %in% c("old", "potentially never")] <- 1
TreeLvlCombined_mod$Gardenscape <- as.factor(TreeLvlCombined_mod$Gardenscape)
#######Pruning
TreeLvlCombined_mod$PrunedCorrect <-TreeLvlCombined_mod$Pruned
TreeLvlCombined_mod$PrunedCorrect[TreeLvlCombined_mod$HatrackPrune == 1 | TreeLvlCombined_mod$FlushCutPrune == 1] <- 0
#######################################################################Site conditions
##Group Land Use categories
TreeLvlCombined_mod$LandUse <- as.character(TreeLvlCombined_mod$LandUse)
TreeLvlCombined_mod$LandUse[TreeLvlCombined_mod$LandUse == "SFR-A" | TreeLvlCombined_mod$LandUse == "SFR-D" | TreeLvlCombined_mod$LandUse == "MFR"] <- "Res"
TreeLvlCombined_mod$LandUse[TreeLvlCombined_mod$LandUse == "COMM" | TreeLvlCombined_mod$LandUse == "MIX"] <- "COMM_Mx"
TreeLvlCombined_mod$LandUse[is.null(TreeLvlCombined_mod$LandUse) |TreeLvlCombined_mod$LandUse == "V" | TreeLvlCombined_mod$LandUse == "IND" | TreeLvlCombined_mod$LandUse == "UT" | TreeLvlCombined_mod$LandUse == "TR" | TreeLvlCombined_mod$LandUse == "AG" | TreeLvlCombined_mod$LandUse == ""| TreeLvlCombined_mod$LandUse == "MP" | TreeLvlCombined_mod$LandUse == "NAT"] <- "Other"
TreeLvlCombined_mod$LandUse <- as.factor(TreeLvlCombined_mod$LandUse)
TreeLvlCombined_mod$LandUse <- relevel(TreeLvlCombined_mod$LandUse, ref="Res")
##SiteType
#Site type
TreeLvlCombined_mod$SiteType <- as.character(TreeLvlCombined_mod$SiteType)
TreeLvlCombined_mod$SiteType[TreeLvlCombined_mod$SiteType == "FY" | TreeLvlCombined_mod$SiteType == "SY"] <- "Yard"
TreeLvlCombined_mod$SiteType[TreeLvlCombined_mod$SiteType == "OM" | TreeLvlCombined_mod$SiteType == "OH"| TreeLvlCombined_mod$SiteType == "PB"] <- "OMH"
TreeLvlCombined_mod$SiteType[is.null(TreeLvlCombined_mod$SiteType) |TreeLvlCombined_mod$SiteType== ""| TreeLvlCombined_mod$SiteType== "NAT"] <- "Other"
TreeLvlCombined_mod$SiteType <- as.factor(TreeLvlCombined_mod$SiteType)
TreeLvlCombined_mod$SiteType <- relevel(TreeLvlCombined_mod$SiteType, ref="SC")
#Crown Light
TreeLvlCombined_mod$CrownLight <- as.numeric(TreeLvlCombined_mod$CrownLight)
TreeLvlCombined_mod$CrownLight <- round(TreeLvlCombined_mod$CrownLight)
TreeLvlCombined_mod$CrownLight[TreeLvlCombined_mod$CrownLight == 0] <- 1
TreeLvlCombined_mod$CrownLight[is.na(TreeLvlCombined_mod$CrownLight)] <- 3 #just give it a moderate value
TreeLvlCombined_mod$CrownLight <- as.factor(TreeLvlCombined_mod$CrownLight)
##Need to modify the Percent Imperv because some of the categories are very low
names(TreeLvlCombined_mod)[names(TreeLvlCombined_mod) == "PercImperv"] <- "PercentImperv"
TreeLvlCombined_mod$PercentImperv <- as.numeric(TreeLvlCombined_mod$PercentImperv)
TreeLvlCombined_mod$PercentImperv[TreeLvlCombined_mod$PercentImperv <=2] <- 1 #less than 26% imperv
TreeLvlCombined_mod$PercentImperv[TreeLvlCombined_mod$PercentImperv ==3] <- 2 #26-50
TreeLvlCombined_mod$PercentImperv[TreeLvlCombined_mod$PercentImperv ==4] <- 3 #51-75
TreeLvlCombined_mod$PercentImperv[TreeLvlCombined_mod$PercentImperv ==5] <- 4 #76-100
TreeLvlCombined_mod$PercentImperv <- as.factor(TreeLvlCombined_mod$PercentImperv)
##############################Tree Health
#collapsing the categories here for ease
TreeLvlCombined_mod$Dieback[((TreeLvlCombined_mod$Dieback > 3) & (TreeLvlCombined_mod$Dieback <= 6))] <- 4 #11-25%
TreeLvlCombined_mod$Dieback[(TreeLvlCombined_mod$Dieback > 6)] <- 5 #25%+
TreeLvlCombined_mod$Dieback[TreeLvlCombined_mod$CrownStress >= 5] <- 5 #trees are dead
##because there are not enough categories
TreeLvlCombined_mod$Defoliation[TreeLvlCombined_mod$Defoliation > 3] <- 3
TreeLvlCombined_mod$Discoloration[TreeLvlCombined_mod$Discoloration > 4] <- 4
#Get rid of 0.5
TreeLvlCombined_mod$Discoloration <- round(TreeLvlCombined_mod$Discoloration)
TreeLvlCombined_mod$Defoliation <- round(TreeLvlCombined_mod$Defoliation)
TreeLvlCombined_mod$Dieback <- round(TreeLvlCombined_mod$Dieback)
##first need to get just one entry per tree
colsSto <- names(TreeLvlCombined_mod)
uniTrees <- unique(TreeLvlCombined_mod$TreeName)
UniqueTreeData <- as.data.frame(matrix(0, ncol=length(colsSto), nrow = length(uniTrees)))
names(UniqueTreeData) <- colsSto
TreeData_SegLvl <- TreeLvlCombined_mod
TreeData_SegLvl$Year <- as.numeric(as.character(TreeData_SegLvl$Year))
TreeData_SegLvl$LandUse <- as.character(TreeData_SegLvl$LandUse)
TreeData_SegLvl$SiteType <- as.character(TreeData_SegLvl$SiteType)
MatInd <- 1
#get one row per tree
for (u in 1:length(uniTrees)){
treeName <- uniTrees[u]
treedata <- TreeData_SegLvl[na.omit(TreeData_SegLvl$TreeName == treeName),]
treedata <- treedata[!is.na(treedata$TreeName),]
mostRecYr <- max(na.omit(as.numeric(treedata$Year)))
Dat2Use <- treedata[treedata$Year == mostRecYr, ]
UniqueTreeData[MatInd,] <- Dat2Use[1,]
MatInd <- MatInd + 1
}
#UniqueTreeData <- UniqueTreeData[, c(3:10, 13:37,41, 45:51)]
UniqueTreeData <- UniqueTreeData[!is.na(UniqueTreeData$TreeName),]
#for diversity, I think you the number of trees of a given species for each segment
UniqueTreeData$Segment <- levels(TreeData_SegLvl$Segment)[as.numeric(UniqueTreeData$Segment)]
SppSeg <- table(UniqueTreeData[, c("Segment", "GenSpe")])
simpsonDivSegs <- diversity(SppSeg, index="simpson")
GenSeg <- table(UniqueTreeData[, c("Segment", "Genus")])
simpsonDivSegs_gen <- diversity(GenSeg, index="simpson")
##need things to be numeric in order for it to work
UniqueTreeData$CorrMulch <- as.numeric(UniqueTreeData$CorrMulch)
SegAvg_UniqueDat <- UniqueTreeData %>%
group_by(Segment) %>%
summarize_at(vars("BasalArea", "CorrMulch", "PrunedCorrect", "UrbanApp"), mean, na.rm=TRUE)
TotalSegTrees <- table(UniqueTreeData$Segment)
#Site Type
Seg_SiteType_Counts <- table(UniqueTreeData[,c("Segment", "SiteType")])
Perc_SegST <- sweep(Seg_SiteType_Counts, 1, TotalSegTrees, FUN='/')
#from this, probably most useful to look at percent SC or SP and then Percent FY or SY
#with mod, use SP, SC, Yard
#Land Use
Seg_LandUse_Counts <- table(UniqueTreeData[,c("Segment", "LandUse")])
Perc_SegLU <- sweep(Seg_LandUse_Counts, 1, TotalSegTrees, FUN='/')
#here, look at SFR-A and SFR-D versus MFR vs COMM vs INST vs Other?
#Res, MP_INST
#Percent Impervious
Seg_PI_Counts <- table(UniqueTreeData[,c("Segment", "PercentImperv")])
Perc_SegPI <- sweep(Seg_PI_Counts, 1, TotalSegTrees, FUN='/')
#kind of like your analyses, maybe combine 1 and 2, then 3, then 4 and 5 combined
#Gardenscape
Seg_Gardenscape_Counts <- table(UniqueTreeData[,c("Segment", "Gardenscape")])
Perc_SegGard <- sweep(Seg_Gardenscape_Counts, 1, TotalSegTrees, FUN='/')
#use whatever you used in the analyses above
#do 1, 2, 3+?, or maybe do 1 and 4/5 and leave the rest to be moderate?
#Tree Health
#should use the same groupings as I did for the analyses above
#for these it is probably worth pulling in all the cateories to start with and adjust as needed
#maybe ignore defoliation because you only have 2 categories?
Seg_Discol_Counts <- table(UniqueTreeData[,c("Segment", "Discoloration")])
Perc_SegDisc <- sweep(Seg_Discol_Counts, 1, TotalSegTrees, FUN='/')
Seg_Defol_Counts <- table(UniqueTreeData[,c("Segment", "Defoliation")])
Perc_SegDef <- sweep(Seg_Defol_Counts, 1, TotalSegTrees, FUN='/')
Seg_DBK_Counts <- table(UniqueTreeData[,c("Segment", "Dieback")])
Perc_SegDBK <- sweep(Seg_DBK_Counts, 1, TotalSegTrees, FUN='/')
Seg_CS_Counts <- table(UniqueTreeData[,c("Segment", "CrownStress")])
Perc_SegCS <- sweep(Seg_CS_Counts, 1, TotalSegTrees, FUN='/')
##Get the total number of trees
totNumTreesSegment <- table(UniqueTreeData[,c("Segment")])
##################################################Combine all the data
nrows <- length(SegAvg_UniqueDat$Segment)
SegDatCols <- c("Segment", "AvgBA", "PercCorrMulch", "PercUrbanApp", "PercResTree", "PercCOMM_MxTree", "PercSC", "PercGar3o4", "PercDisc3o4", "PercDBK5", "PercCS4o5", "SimpsonsDivSpp", "SimpsonsDivGen", "totNumTrees")
SegmentLvlDat <- as.data.frame(matrix(NA, nrow=nrows, ncol=length(SegDatCols)))
names(SegmentLvlDat) <- SegDatCols
SegNms <- na.omit(unique(SegAvg_UniqueDat$Segment))
##Add census data to empty df
for(s in 1:length(SegNms)){
seg <- SegNms[s]
SegmentLvlDat$Segment[s] <- seg
####Pull in the non-census data
SegInd_treed <- match(seg, SegAvg_UniqueDat$Segment)
SegmentLvlDat$AvgBA[s] <- SegAvg_UniqueDat$BasalArea[SegInd_treed]
SegmentLvlDat$PercCorrMulch[s] <- SegAvg_UniqueDat$CorrMulch[SegInd_treed]
#SegmentLvlDat$PercPrunedCorrect[s] <- SegAvg_UniqueDat$PrunedCorrect[SegInd_treed]
SegmentLvlDat$PercUrbanApp[s] <- SegAvg_UniqueDat$UrbanApp[SegInd_treed]
##have to pull from other summaries
segInd_Sum <- match(seg, rownames(Perc_SegLU))
SegmentLvlDat$PercResTree[s] <- Perc_SegLU[segInd_Sum, match("Res", colnames(Perc_SegLU))]
SegmentLvlDat$PercCOMM_MxTree[s] <- Perc_SegLU[segInd_Sum, match("COMM_Mx", colnames(Perc_SegLU))]
SegmentLvlDat$PercSC[s] <- Perc_SegST[segInd_Sum, match("SC", colnames(Perc_SegST))]
SegmentLvlDat$PercGar3o4[s] <- Perc_SegGard[segInd_Sum,match("3", colnames(Perc_SegGard))] + Perc_SegGard[SegInd_treed,match("4", colnames(Perc_SegGard))]
#tree health outcomes
SegmentLvlDat$PercDisc3o4[s] <- Perc_SegDisc[segInd_Sum, match("3", colnames(Perc_SegDisc))] + Perc_SegDisc[SegInd_treed, match("4", colnames(Perc_SegDisc))]
SegmentLvlDat$PercDBK5[s] <- Perc_SegDBK[segInd_Sum, match("5", colnames(Perc_SegDBK))]
SegmentLvlDat$PercCS4o5[s] <- Perc_SegCS[segInd_Sum, match("4", colnames(Perc_SegCS))] + Perc_SegCS[SegInd_treed, match("5", colnames(Perc_SegCS))]
##Diversity
SegmentLvlDat$SimpsonsDivSpp[s] <- as.vector(simpsonDivSegs[match(seg, names(simpsonDivSegs))])
SegmentLvlDat$SimpsonsDivGen[s] <- as.vector(simpsonDivSegs_gen[match(seg, names(simpsonDivSegs_gen))])
#basic info
SegmentLvlDat$totNumTrees[s] <- totNumTreesSegment[match(seg, names(totNumTreesSegment))]
}
SegmentLvlDat <- SegmentLvlDat[!is.na(SegmentLvlDat$Segment),]
#get relevant zoning data
Zoning_bySeg <- Zoning_bySeg[Zoning_bySeg$Segment %in% unique(SegmentLvlDat$Segment),]
#need to make sure the order is the same for all of these - and the buildings are not to start with
TreeZone <- merge(SegmentLvlDat, Zoning_bySeg, by="Segment")
TreeZCens <- merge(TreeZone, SegmentCensusData, by="Segment")
Seg_allData <- merge(TreeZCens, Seg_building, by="Segment")
Seg_allData$AftTemp50m <- SegmentTemp$AfternoonTemp50m[match(Seg_allData$Segment, SegmentTemp$Segment)]
Seg_allData$AftTemp10m <- SegmentTemp$AfternoonTemp10m[match(Seg_allData$Segment, SegmentTemp$Segment)]
##missing temperature data for some of them because they are outside the temperature measurement area
#nothing you can do about it, just have to exclude them
AnalysisCols <- c("PercSC", "PercGar3o4", "SimpsonsDivSpp", "SimpsonsDivGen", "PercCorrMulch","AvgBA", "PercUrbanApp", "PercDBK5", "PercDisc3o4", "PercCS4o5")
#go through and slightly adjust the variables that will be modeled with a beta distribution
for(c in 1:length(AnalysisCols)){
v <- AnalysisCols[c]
v_ind <- match(v, names(Seg_allData))
Seg_allData[(Seg_allData[,v_ind] == 0) ,v_ind] <- 0.0001
Seg_allData[(Seg_allData[,v_ind] == 1) ,v_ind] <- 0.9999
}
Seg_allData$AllConst_since11 <- Seg_allData$NumConst_since11 + Seg_allData$NumReno_since11
##for all but the number of trees, get rid of segments with < 10 trees
SegM10Trees <- Seg_allData[Seg_allData$totNumTrees >= 10, ]
SegM10Trees_wTemp <- SegM10Trees[!is.na(SegM10Trees$AftTemp50m),]
wts <- SegM10Trees$totNumTrees
wts_wTemp <- SegM10Trees_wTemp$totNumTrees
write.csv(Seg_allData, "./DurhamSegmentData.csv")
knitr::opts_chunk$set(echo = TRUE)
#library(stevemisc) #for simulating censured continuous data
#source( '../orFunctions_jsc.R' )
#Rcpp::sourceCpp( '../cppFns.cpp' )
##Group means for segment data
library(dplyr)
##Visuals
library(ggplot2)
##dataframe manipulation
library(dplyr)
#for your diversity metrics
library(vegan)
#for beta regressions
library(betareg)
library(StepBeta)
#for stepwise poisson
library(My.stepwise)
#for VIF
library(car)
Seg_allData <- read.csv("./ChicagoSegmentData.csv")
wts <- as.vector(Seg_allData$totNumTrees)
Seg_allData$AllConst_since11 <- Seg_allData$NumConst_since11 + Seg_allData$NumReno_since11
#to get a sense of the correlations
ChiCors <- cor(Seg_allData[,c("PercComm_z", "PercCOMM_MxTree", "PercRes_z","NumConst_since11",
"NumReno_since11", "AllConst_since11",  "NumBuild", "SVI",
"AftTemp","Change_PHL", "Change_PBl","Change_PWnHL",
"Change_MedHHI", "Avg_PRent","Avg_Rmov", "PercWhiteNonHL21",
"MedHouseInc21", "PercRent21","PercRMov21" )])
##Because of the correlations above, I think it makes sense to simplify
f1 <- "PercResTree + SVI + Change_PWnHL + Change_MedHHI + Avg_Rmov"
f2 <- "PercResTree + AllConst_since11 + Change_PWnHL + Change_MedHHI + Avg_Rmov"
mods_m4 <- paste(rep("SimpsonsDivSpp ~", 2), c(f1, f2))
f4mod.1 <- betareg(mods_m4[1], data=Seg_allData, weights=wts)
bestf4mod.1 <- StepBeta(f4mod.1)
f4sum.1 <- summary(bestf4mod.1)
f4mod.2 <- betareg(mods_m4[2], data=Seg_allData, weights=wts)
bestf4mod.2 <- StepBeta(f4mod.2)
f4sum.2 <- summary(bestf4mod.2)
AIC(bestf4mod.1, bestf4mod.2)
write.csv(f4sum.2$coefficients$mean, "../04Outputs/Chicago/Chi_SimpsonSpp_Best_2mod4.csv")
mods_m5 <- paste(rep("SimpsonsDivGen ~", 2), c(f1, f2))
f5mod.1 <- betareg(mods_m5[1], data=Seg_allData, weights=wts)
bestf5mod.1 <- StepBeta(f5mod.1)
f5sum.1 <- summary(bestf5mod.1)
f5mod.2 <- betareg(mods_m5[2], data=Seg_allData, weights=wts)
bestf5mod.2 <- StepBeta(f5mod.2)
f5sum.2 <- summary(bestf5mod.2)
AIC(bestf5mod.1, bestf5mod.2)
write.csv(f5sum.1$coefficients$mean, "../04Outputs/Chicago/Chi_SimpsonGen_Best_2mod4.csv")
mods_m6 <- paste(rep("AvgBA ~", 2), c(f1, f2))
f6mod.1 <- lm(mods_m6[1], data=Seg_allData, weights=wts)
bestf6mod.1 <- step(f6mod.1, direction="both")
f6sum.1 <- summary(bestf6mod.1)
f6mod.2 <- lm(mods_m6[2], data=Seg_allData, weights=wts)
bestf6mod.2 <- step(f6mod.2, direction="both")
f6sum.2 <- summary(bestf6mod.2)
AIC(bestf6mod.1, bestf6mod.2)
write.csv(f6sum.1$coefficients, "../04Outputs/Chicago/Chi_AvgBA_Best_2mod4.csv")
f1.2 <- "PercRes_z + SVI + Change_PWnHL + Change_MedHHI + Avg_Rmov"
f2.2 <- "PercRes_z + AllConst_since11 + Change_PWnHL + Change_MedHHI + Avg_Rmov"
##Number of Trees
mods_m7 <- paste(rep("totNumTrees ~", 2), c(f1.2, f2.2))
f7mod.1 <- step(glm(mods_m7[1], family="poisson", data=Seg_allData))
f7sum.1 <- summary(f7mod.1)
f7mod.2 <- step(glm(mods_m7[2], family="poisson", data=Seg_allData))
f7sum.2 <- summary(f7mod.2)
AIC(f7mod.1, f7mod.2)
write.csv(f7sum.1$coefficients, "../04Outputs/Chicago/Chi_NumTrees_Best_2mod4.csv")
mods_m8 <- paste(rep("PercUrbanApp ~", 2), c(f1, f2))
f8mod.1 <- betareg(mods_m8[1], data=Seg_allData, weights=wts)
bestf8mod.1 <- StepBeta(f8mod.1)
f8sum.1 <- summary(bestf8mod.1)
f8mod.2 <- betareg(mods_m8[2], data=Seg_allData, weights=wts)
bestf8mod.2 <- StepBeta(f8mod.2)
f8sum.2 <- summary(bestf8mod.2)
AIC(bestf8mod.1, bestf8mod.2)
write.csv(f8sum.2$coefficients, "../04Outputs/Chicago/Chi_UrbanApp_Best_2mod4.csv")
mods_m9 <- paste(rep("PercDisc3o4 ~", 2), c(f1, f2))
f9mod.1 <- betareg(mods_m9[1], data=Seg_allData, weights=wts)
bestf9mod.1 <- StepBeta(f9mod.1)
f9sum.1 <- summary(bestf9mod.1)
f9mod.2 <- betareg(mods_m9[2], data=Seg_allData, weights=wts)
bestf9mod.2 <- StepBeta(f9mod.2)
f9sum.2 <- summary(bestf9mod.2)
AIC(bestf9mod.1, bestf9mod.2)
write.csv(f9sum.2$coefficients, "../04Outputs/Chicago/Chi_Discol_Best_2mod4.csv")
mods_m10 <- paste(rep("PercDBK5 ~", 2), c(f1, f2))
f10mod.1 <- betareg(mods_m10[1], data=Seg_allData, weights=wts)
bestf10mod.1 <- StepBeta(f10mod.1)
f10sum.1 <- summary(bestf10mod.1)
f10mod.2 <- betareg(mods_m10[2], data=Seg_allData, weights=wts)
bestf10mod.2 <- StepBeta(f10mod.2)
f10sum.2 <- summary(bestf10mod.2)
AIC(bestf10mod.1, bestf10mod.2)
write.csv(f10sum.2$coefficients, "../04Outputs/Chicago/Chi_DBK_Best_2mod4.csv")
mods_m11 <- paste(rep("PercCS4o5 ~", 2), c(f1, f2))
f11mod.1 <- betareg(mods_m11[1], data=Seg_allData, weights=wts)
bestf11mod.1 <- StepBeta(f11mod.1)
f11sum.1 <- summary(bestf11mod.1)
f11mod.2 <- betareg(mods_m11[2], data=Seg_allData, weights=wts)
bestf11mod.2 <- StepBeta(f11mod.2)
f11sum.2 <- summary(bestf11mod.2)
AIC(bestf11mod.1, bestf11mod.2)
write.csv(f11sum.2$coefficients, "../04Outputs/Chicago/Chi_CS_Best_2mod4.csv")
write.csv(f11sum.2$coefficients, "../04Outputs/Chicago/Chi_CS_Best_2mod4.csv")
cnms <- c("ModelType", "DepVar", "model", "R2")
ModOverview <- as.data.frame(matrix(0, nrow=11, ncol=length(cnms)))
names(ModOverview) <- cnms
modList <- list(f4sum.2, f5sum.1, f6sum.1, f7sum.2, f8sum.2, f9sum.2, f10sum.2, f11sum.2)
modTyps <- c("beta", "beta", "lin", "pois", "beta", "beta", "beta", "beta")
modDep <- c("SimpDivSpp", "SimpDivGen", "AvgBA", "NumTrees", "PercUrbanApp", "PercDisc", "PercDBK", "PercCS")
for (m in 1:8){
mod <- modList[[m]]
modT <- modTyps[m]
ModOverview$ModelType[m] <- modT
ModOverview$DepVar[m] <- modDep[m]
#store data for diff model types
if(modT == "beta"){
ModOverview$model[m] <- as.character(mod$call)
ModOverview$R2[m] <- mod$pseudo.r.squared
pm <- mod$coefficients$mean
} else if (modT == "lin"){
ModOverview$model[m] <- as.character(mod$call)[2]
ModOverview$R2[m] <- mod$adj.r.squared
pm <- mod$coefficients
}else if (modT == "pois"){
ModOverview$model[m] <- as.character(mod$call)[2]
ModOverview$R2[m] <- with(mod, 1-deviance/null.deviance)
pm <- mod$coefficients
}
##printout the coefficient values
#write.csv(pm, paste("../01Data/Chicago/BetaVals", modDep[m], "since15_062824.csv", sep=""))
}
write.csv(ModOverview, "../04Outputs/Chicago/Chi_ModelOverviewResults_2mod4.csv")
knitr::opts_chunk$set(echo = TRUE)
#library(stevemisc) #for simulating censured continuous data
#source( '../orFunctions_jsc.R' )
#Rcpp::sourceCpp( '../cppFns.cpp' )
##Group means for segment data
library(dplyr)
##Visuals
library(ggplot2)
##dataframe manipulation
library(dplyr)
#for your diversity metrics
library(vegan)
#for beta regressions
library(betareg)
library(StepBeta)
#for stepwise poisson
library(My.stepwise)
#for VIF
library(car)
Seg_allData <- read.csv("./ChicagoSegmentData.csv")
#to get a sense of the correlations
ChiCors <- cor(Seg_allData[,c("PercComm_z", "PercCOMM_MxTree", "PercRes_z","NumConst_since11", "NumReno_since11", "AllConst_since11", "NumBuild", "SVI", "AftTemp","Change_PHL", "Change_PBl","Change_PWnHL",
"Change_MedHHI", "Avg_PRent","Avg_Rmov", "PercWhiteNonHL21",
"MedHouseInc21", "PercRent21","PercRMov21" )])
ChiCors
Seg_allData <- read.csv("./DurhamSegmentData.csv")
setwd("~/Grad School/Dissertation Research/ChiDur_NeiAnalyses/02Scripts")
setwd("~/Grad School/Dissertation Research/ChiDur_NeiAnalyses/02Scripts")
Seg_allData <- read.csv("./DurhamSegmentData.csv")
knitr::opts_chunk$set(echo = TRUE)
##Group means for segment data
library(dplyr)
##Visuals
library(ggplot2)
##dataframe manipulation
library(dplyr)
#for your diversity metrics
library(vegan)
#for beta regressions
library(betareg)
library(StepBeta)
#for stepwise poisson
library(My.stepwise)
DurCors <- cor(SegM10Trees[,c("PercComm_z", "PercRes_z","NumConst_since11","NumReno_since11",
"AllConst_since11", "NumBuild", "SVI","Change_PHL", "Change_PBl","Change_PWnHL",
"Change_MedHHI", "Avg_PRent","Avg_Rmov", "PercWhiteNonHL21",
"MedHouseInc21", "PercRent21","PercRMov21" )])
##for all but the number of trees, get rid of segments with < 10 trees
SegM10Trees <- Seg_allData[Seg_allData$totNumTrees >= 10, ]
SegM10Trees_wTemp <- SegM10Trees[!is.na(SegM10Trees$AftTemp50m),]
wts <- SegM10Trees$totNumTrees
wts_wTemp <- SegM10Trees_wTemp$totNumTrees
DurCors <- cor(SegM10Trees[,c("PercComm_z", "PercRes_z","NumConst_since11","NumReno_since11",
"AllConst_since11", "NumBuild", "SVI","Change_PHL", "Change_PBl","Change_PWnHL",
"Change_MedHHI", "Avg_PRent","Avg_Rmov", "PercWhiteNonHL21",
"MedHouseInc21", "PercRent21","PercRMov21" )])
DurCors
Seg_allData$AllConst_since11 <- Seg_allData$NumConst_since11 + Seg_allData$NumReno_since11
DurCors <- cor(SegM10Trees[,c("PercComm_z", "PercRes_z","NumConst_since11","NumReno_since11",
"AllConst_since11", "NumBuild", "SVI","Change_PHL", "Change_PBl","Change_PWnHL",
"Change_MedHHI", "Avg_PRent","Avg_Rmov", "PercWhiteNonHL21",
"MedHouseInc21", "PercRent21","PercRMov21" )])
DurCots
DurCors
knitr::opts_chunk$set(echo = TRUE)
##Group means for segment data
library(dplyr)
##Visuals
library(ggplot2)
##dataframe manipulation
library(dplyr)
#for your diversity metrics
library(vegan)
#for beta regressions
library(betareg)
library(StepBeta)
#for stepwise poisson
library(My.stepwise)
#for VIF
library(car)
Seg_allData <- read.csv("../01Data/ChicagoSegmentData.csv")
names(Seg_allData)
